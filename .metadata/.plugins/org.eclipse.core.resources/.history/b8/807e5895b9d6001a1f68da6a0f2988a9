package com.castgroup.api.model;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import org.hibernate.annotations.NaturalId;

import lombok.Data;

@Data
@Entity
@Table(uniqueConstraints = { @UniqueConstraint(columnNames = { "email" }) })
@SequenceGenerator(name = "seq_signin", initialValue = 4, allocationSize = 100)
public class Signin {

	@Id
	@GeneratedValue
	private Integer id;

	@NaturalId
	@NotBlank
	@Size(max = 50)
	@Email
	private String email;

	@NotBlank
	@Size(min = 6, max = 100)
	private String password;

	@OneToOne(mappedBy = "signin", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private Funcionario funcionario;
	
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "signin_has_role", 
      joinColumns = @JoinColumn(name = "signin_id"), 
      inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles = new HashSet<>();

}
